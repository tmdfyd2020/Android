[ 프래그먼트 사용 목적 ]
○ 분할된 화면들을 독립적으로 구성하기 위해 사용함
○ 분할된 화면들의 상태를 관리하기 위해 사용함

[ 액티비티 화면과 프래그먼트의 차이점 ]
○ 똑같은 XML 레이아웃으로 만들지만 액티비티에 사용되면 시스템에서 관리하는 화면이고, 프래그먼트에서 사용되면 액티비티 위에 올라가는 화면의 일부인 부분 화면이 된다.

< 액티비티 > : 액티비티 + 인텐트 + 액티비티 매니저(안드로이드 시스템)
○ 앱 구성 요소이므로 액티비티 매니저라는 안드로이드 시스템에서 관리한다. 
○ 인텐트가 시스템이 이해하는 형식으로 명령이나 데이터를 만들어 보내는 역할을 한다.

< 프래그먼트 > : 프래그먼트 + 메서드 호출 + 프래그먼트 매니저(액티비티 위)
○ 프래그먼트는 항상 액티비티 위에 올라가 있어야 한다. 따라서 프래그먼트가 동작하는 시점은 프래그먼트가 메모리에 만들어진 시점이 아니라 액티비티에 올라가는 시점이다.
○ 액티비티에서 액티비티 매니저 역할을 프래그먼트 단에서는 프래그먼트 매니저라는 액티비티에서 맡는다.
○ 액티비티에서 인텐트가 하던 역할을 프래그먼트에서는 메서드를 만들고 메서드를 호출하는 방식으로 바꿔서 사용한다.

[ 프래그먼트 화면에 추가하기 ]
○ 프래그먼트에는 setContentView() 메서드가 없어서 인플레이션 객체인 LayoutInflater를 사용해 인플레이션을 진행해야 한다.
○ onCreateView() 메서드는 콜백 메서드로 인플레이션이 필요한 시점에서 자동으로 호출된다.

[ Fragment 클래스에 있는 주요 메서드 ]
○ public final Activity getActivity()
  -> 이 프래그먼트를 포함하는 액티비티를 반환함
○ public final FragmentManager getFragmentManager()
  -> 이 프래그먼트를 포함하는 액티비티에서 프래그먼트 객체들과 의사소통하는 프래그먼터 매니저를 반환함
○ public final Fragment getParentFragment()
  -> 이 프래그먼트를 포함하는 부모가 프래그먼트일 경우 리턴함. 액티비티이면 null을 반환함
○ public final int getId()
  -> 이 프래그먼트의 ID를 반환함
  
[ FragmentManager 클래스에 있는 주요 메서드 ]
○ public abstract FragmentTransaction beginTransaction()
  -> 프래그먼트를 변경하기 위한 트랜잭션을 시작함
○ public abstract Fragment findFragmentById(int id)
  -> ID를 이용해 프래그먼트 객체를 찾음
○ public abstract Fragment findFragmentByTag(String tag)
  -> 태그 정보를 사용해 프래그먼트 객체를 찾음
○ public abstract boolean executePendingTransactions()
  -> 트랜잭션은 commit() 메서드를 호출하면 실행되지만 비동기 방식으로 실행되므로 즉시 실행하고 싶다면 이 메서드를 추가로 호출해야 한다.
  
○ 프래그먼트 매니저 객체를 참조하려면 getFragmentManager() 메서드를 호출하거나 getSupportFragmentManager() 메서드를 호출할 수 있다.
  ○ 일반적으로는 예전 버전까지 호환되도록 만드는 getSupportFragmentManager() 메서드를 사용하는 것을 권장한다.
  
[ 프래그먼트의 수명주기 ]
○ 프래그먼트는 액티비티를 본떠 만들면서 액티비티처럼 독립적으로 동작하도록 수명주기 메서드를 추가했다.
○ 상태에 따라 API에서 미리 정해둔 콜백 함수가 호출되므로 그 안에 필요한 기능을 넣을 수 있다.
○ 프래그먼트의 수명주기
  ○ 1) 액티비티에 프래그먼트 추가
  |
  ○ 2) onAttach(Activity) : 프래그먼트가 액티비티와 연결될 때 호출됨
  | # 파라미터로 전달되는 액티비티 객체 위에 프래그먼트가 올라가 있게 된다.
  ○ 3) onCreate(Bundle) : 프래그먼트가 초기화될 때 호출됨. (new 연산자를 이용해 새로운 프래그먼트 객체를 만드는 시점이 아니라는 점에 주의해야 함)
  | # 프래그먼트는 액티비티 안에 추가되어 사용되면서 동시에 액티비티에 종속되어 있어 프래그먼트와 액티비티가 연결되어야 초기화될 수 있다.
  | # 이 때문에 new 연산자를 사용해 프래그먼트 객체를 만드는 시점과 onCreate() 메서드가 호출되는 시점이 달라진다.
  ○ 4) onCreateView(LayoutInflator, ViewGroup, Bundle) : 프래그먼트와 관련되는 뷰 계층을 만들어서 리턴함.
  | # 프래그먼트와 관련되는 뷰들의 계층도를 구성하는 과정에서 호출된다.
  ○ 5) onActivityCreated(Bundle) : 프래그먼트와 연결된 액티비티가 onCreate() 메서드의 작업을 완료했을 때 호출됨.
  | # 프래그먼트에서 액티비티가 만들어진 상태를 알 수 있도록 해준다.
  ○ 6) onStart() : 프래그먼트와 연결된 액티비티가 onStart()되어 사용자에게 프래그먼트가 보일 때 호출됨.
  |
  ○ 7) onResume() : 프래그먼트와 연결된 액티비티가 onResume()되어 사용자와 상호작용할 수 있을 때 호출됨.
  |
  ○ 8) 프래그먼트 활성화(액티비티 화면에 보이는 상태)
  |
  ○ 9) onPause() : 프래그먼트와 연결된 액티비티가 onPause() 되어 사용자와 상호작용을 중지할 때 호출됨. (~onResume())
  |
  ○ 10) onStop() : 프래그먼트와 연결된 액티비티가 onStop() 되어 화면에서 더 이상 보이지 않을 때나 프래그먼트의 기능이 중지되었을 때 호출됨. (~onStart())
  |
  ○ 11) onDestroyView() : 프래그먼트와 관련된 뷰 리소스를 해제할 수 있도록 호출됨. (~onCreateView())
  |
  ○ 12) onDestroy() : 프래그먼트의 상태를 마지막으로 정리할 수 있도록 호출됨. (~onDestroy())
  |
  ○ 13) onDetach() : 프래그먼트가 액티비티와 연결을 끊기 바로 전에 호출됨. (~onDetach())
  |
  ○ 14) 액티비티에서 프래그먼트 제거
  
○ 프래그먼트 객체가 new 연산자로 만들어졌더라도 액티비티 위에 올라가기 전까지는 프래그먼트로 동작하지 않는다.
  ○ MyFragment fragment = new MyFragment(); : 프래그먼트 객체는 만들어졌지만 프래그먼트로 동작하지는 않음.
  ○ getSupportFragmentManager().beginTransaction().add(fragment).commit(); : 액티비티에 추가된 후 프래그먼트로 동작함.
