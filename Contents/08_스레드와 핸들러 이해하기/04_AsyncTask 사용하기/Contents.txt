- AsyncTask 사용하기 -

○ 앞서서 본 내용들을 핸들러를 사용하지 않고 좀 더 간단하게 작업하는 방법이 있다.

○ AsyncTask 클래스를 상속하여 새로운 클래스를 만들면 그 안에 스레드를 위한 코드와 UI 접근 코드를 한꺼번에 넣을 수 있다.
  -> 스레드로 처리해야 하는 코드를 하나의 AsyncTask 클래스로 정의할 수 있다는 장점
  ○ 예를 들면
      웹서버에서 고객 이름을 가져오는 작업과 웹서버에서 제품 이름을 가져오는 작업을 서로 다른 코드로 분리시키고 싶다면
        두 개의 AsyncTask 상속 클래스를 만든 후 각각의 코드를 넣으면 된다.
          AsyncTask 객체를 만들고 execute() 메서드를 실행하면
            이 객체는 정의된 백그라운드 작업을 수행하고 필요한 경우에 그 결과를 메인 스레드에서 실행하므로
              UI 객체에 접근하는데 문제가 없다.
              
○ AsyncTask 클래스를 상속하여 새로운 클래스를 정의하면 호출되는 콜백 메서드들
  ○ 신규 스레드 단
    ○ doinBackground
      : 새로 만든 스레드에서 백그라운드 작업을 수행한다.
        execute() 메서드를 호출할 때 사용된 파라미터를 배열로 전달받는다.
  ○ 메인 스레드 단
    ○ onPreExecute
      : 백그라운드 작업을 수행하기 전에 호출된다.
        메인 스레드에서 실행되며 초기화 작업에 사용된다.
    ○ onProgressUpdate
      : 백그라운드 작업의 진행 상태를 표시하기 위해 호출된다.
        작업 수행 중간 중간에 UI 객체에 접근하는 경우에 사용된다.
        이 메서드가 호출되도록 하려면 백그라운드 작업 중간에 publishProgress() 메서드를 호출해야 한다.
    ○ onPostExecute
      : 백그라운드 작업이 끝난 후에 호출된다.
        메인 스레드에서 실행되며 메모리 리로스를 해제하는 등의 작업에 사용된다.
        백그라운드 작업의 결과는 Result 타입의 파라미터로 전달된다.
=> 하나의 클래스 안에 스레드에서 동작해야 하는 작업과 그 작업의 결과를 UI 객체에 반영하는 코드를 같이 구현할 수 있어서
     스레드로 수행해야 할 어떤 기능을 하나의 클래스만으로 만들 수 있다는 장점이 있다.

○ AsyncTask 객체의 cancel() 메서드를 호출하면 작업을 취소할 수 있음 -> onCancelled() 메서드 호출된다.

○ AsyncTask 객체의 getStatus() 메서드를 사용하면 작업의 진행 상황을 확인할 수 있음
  ○ PENDING : 작업이 아직 시작되지 않았다.
  ○ RUNNING : 실행 중이다.
  ○ FINISHED : 종료되었다.








