
[ TextView와 EditText의 다른 기능들 ]

-> TextView와 EditText는 View를 상속받아서 만들어진 것이다. View의 기능 중 일부를 보도록 하자.
 
□ 커서 관련 속성
  □ selectAllOnFocus="true" : 포커스를 받을 때 문자열 전체가 선택된다. 전체에서 마지막 커서로 바꾸고 싶으면 방향키를 눌러주면 된다.
  □ cursorVisible="true" : 커서를 보이도록 한다.
  □ public int getSelectionStart() : 선택된 영역의 시작 위치를 알려준다.
  □ public int getSelectionEnd() : 끝 위치를 알려준다. 선택 영역이 없으면 커서가 있는 현재 위치를 알려준다.
  □ public void setSelection(int start, int stop) : 선택 영역을 지정하는데 사용한다.
  □ public void extendSelection(int index) : 선택 영역을 확장하는데 사용한다.
  □ public void selectAll() : 전체 문자열이 선택된다.
  
□ 자동 링크 관련 속성
  □ autoLink="true" : 문서에 포함된 웹페이지 주소나 이메일 주소를 링크 색상으로 표시하고 링크를 누르면 웹페이지에 바로 접속하거나 메일 편집기를 띄워준다.
  
□ 줄 간격 조정 관련 속성 : 텍스트가 많은 화면에서 가독성을 위함
  □ lineSpacingMultiplier : 줄 간격을 기본 줄 간격의 배수로 설정
  □ lineSpacingExtra : 여유 값으로 설정
  
□ 문자열 변경 처리 관련 속성 : EditText에 입력된 문자를 확인하거나 입력된 문자가 필요한 포맷과 맞는지 확인할 때 getText() 사용
  이 메소드가 리턴하는 것은 Editable 객체이고, 이 객체의 toSting() 메소드를 이용하면 일반 String 타입의 문자열을 확인할 수 있다.
  □ public void addTextChangedListener(TextWatcher watcher) : 텍스트가 변경될 때마다 발생하는 이벤트를 처리한다.
    □ public void beforeTextChanged(CharSequence s, int start, int count, int after) : 문자열이 편집되기 전
    □ public void afterTextChanged(Editable s) : 문자열이 편집된 후
    □ public void onTextChanged(CharSequence s, int start, int before, int count) : 편집된 정보 확인
    □ 문자를 SMS로 전송할 때 사용자가 몇 글자를 입력했는지 바로바로 표시하고 싶을 때 TextWatcher 인터페이스를 활용한다.
