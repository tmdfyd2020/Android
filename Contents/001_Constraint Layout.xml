<?xml version="1.0" encoding="utf-8"?> <!--
□ XML 파일에 일반적으로 추가하는 정보, 이 파일이 XML 형식으로 된 것임을 알려준다.
-->

<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto" 
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"> <!-- 
□ 화면 전체를 감싸고 있는 Constraint Layout에 대한 코드 부분
    ○ ConstraintLayout은 안드로이드 스튜디오에서 자동으로 설정하는 디폴트 레이아웃이다.
□ Constraintlayout은 안드로이드 SDK에 나중에 추가되면서 외부 라이브러리로 분류되어 있어서 패키지 이름까지 함께 기록해줘야 한다.
□ layout_width와 layout_height : 뷰의 가로와 세로 크기를 설정한다. 뷰가 가질 수 있는 내부 속성 중에서 필수 속성이다.
    ○ wrap_content : 뷰에 들어있는 내용물의 크기에 자동으로 맞춘다.
    ○ match_parent : 뷰를 담고 있는 뷰그룹의 여유 공간을 꽉 채운다.
□ xmlns:android >> 안드로이드 기본 SDK에 포함되어 있는 속성을 사용함. 밑에 사용되는 android:~의 접두어로 사용된다.
□ xmlns:app >> 프로젝트에서 사용하는 외부 라이브러리에 포함되어 있는 속성을 사용한다. app라는 단어는 다른 것으로 바꿀 수 있다.
□ xmlns:tools >> 안드로이드 스튜디오의 디자이너 도구 등에서 화면에 보여줄 때 사용한다. 앱이 실행될 때는 적용되지 않고 안드로이드 스튜디오에서만 적용된다.
-->
    
    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_begin="102dp" /> <!--
□ Guideline 클래스 또한 외부 라이브러리에 들어 있으므로 패키지 이름을 다 적어준다.
□ id 속성은 뷰를 구분하는 구분자 역할을 한다.
    ○ [ @+id/아이디 값 ] 형식으로 정의한다.
    ○ id 값은 파일 안에서 중복되면 안된다.
□ 가이드라인은 가로 또는 세로 방향 중에서 어느 방향인지를 지정해야 하므로 orientation이 필수 속성이다.
    ○ orientation : 가이드라인의 방향이 가로인지 세로인지 결정해준다.
□ layout_constraintGuide_begin : 부모 레이아웃의 벽면에서 얼마나 떨어뜨려 배치할지 지정하는 속성 중 하나
    ○ layout_constraintGuide_begin : 세로 방향인 경우 왼쪽부터, 가로 방향인 경우 위쪽부터 거리를 지정
    ○ layout_constraintGuide_end : 세로 방향인 경우 오른쪽부터, 가로 방향인 경우 아래쪽부터 거리를 지정
□ 뷰 크기를 표현할 때는 dp, 글자 크기를 표현할 때는 sp 단위를 사용하는 것이 좋다.
-->

    <Button
        android:id="@+id/button" 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="Button"
        app:layout_constraintLeft_toLeftOf="@+id/guideline"
        app:layout_constraintTop_toTopOf="parent" /> <!--
□ layout_marginTop : 뷰의 위쪽을 얼마나 띄울지 지정한다.
□ constraintLeft_toLeftOf : 이 버튼의 왼쪽 연결점과 "타깃 뷰"의 왼쪽 연결점을 연결하여 제약 조건을 만든다.
    ○ constraintTop_toTopOf : 위쪽 연결점 표시
    ○ constraintTop_toBottomOf : 버튼의 위쪽을 "타깃 뷰"의 아래에 연결하여 제약 조건을 만든다.
-->

    <Button
        android:id="@+id/button1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="Button"
        app:layout_constraintLeft_toLeftOf="@+id/guideline"
        app:layout_constraintTop_toBottomOf="@+id/button" />

    <Button
        android:id="@+id/button2" 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:text="Button"
        app:layout_constraintStart_toStartOf="@+id/guideline"
        app:layout_constraintTop_toBottomOf="@+id/button2" />
</androidx.constraintlayout.widget.ConstraintLayout>
